{"ast":null,"code":"import { USEHTTPSERVICE } from '../base/globalconstants';\nimport { BeacondialogComponent } from '../beacondialog/beacondialog.component';\nimport { Beacon } from '../base/beacon';\nimport { BeaconEditMode, BeaconEditModeT } from '../base/beaconeditmode';\nimport { MapLayerBase } from './mapLayerBase';\nimport { OpenlayersHelper } from './openlayershelper';\nimport { MapBeaconStyles } from './mapBeaconStyles';\nimport ol_style_Circle from 'ol/style/Circle';\nimport ol_style_Style from 'ol/style/Style';\nimport ol_style_Stroke from 'ol/style/Stroke';\nimport ol_Feature from 'ol/Feature';\nimport ol_geom_Point from 'ol/geom/Point';\nimport ol_Overlay from 'ol/Overlay';\nimport ol_format_GeoJSON from 'ol/format/GeoJSON';\nexport class MapBeacons extends MapLayerBase {\n  constructor(dialog, mapService, beaconPopUpBaseElem, mapComponent) {\n    super();\n    this.dialog = dialog;\n    this.mapService = mapService;\n    this.beaconPopUpBaseElem = beaconPopUpBaseElem;\n    this.mapComponent = mapComponent;\n    this.currentFloorId = -1;\n    this.lastMouseClickPosition = null;\n    this.editMode = BeaconEditMode.CreateDefault();\n    this.dialogRef = null;\n    this.currentSelectedBeacon = null;\n    this.highlightFeaturePoint = null;\n    this.highlightFeature = null;\n    this.highlightFeatureAdded = false;\n    this.beaconFeatures = [];\n    this.lastOverlaysUsed = 0;\n    this.beaconOverlays = null;\n    this.beaconTextFields = null;\n    this.Initialize();\n  }\n  Initialize() {\n    let styleFunction = function (feature) {\n      //let source = feature.get(\"source_node\").properties.level;\n      let style = MapBeaconStyles.GetStyle(feature.get(\"signal\"));\n      //console.log(\"MapBeacons::styleFunction   \" + feature.get(\"signal\") + \"###\" + JSON.stringify(style));\n      return style;\n    };\n    let res = OpenlayersHelper.CreateBasicLayer(feature => styleFunction(feature));\n    this.layerSource = res.layerSource;\n    this.layer = res.layer;\n    MapBeaconStyles.InitStyles();\n  }\n  updateData(floorId) {\n    this.currentFloorId = floorId;\n    this.clear();\n    this.subscribeNewRequest(this.mapService.getBeacons(floorId).subscribe(beacons => this.showBeacons(beacons)));\n  }\n  setBeaconEditMode(mode) {\n    console.log(\"MapBeacons::setBeaconEditMode: \" + JSON.stringify(mode));\n    this.clearSelection();\n    this.editMode = mode;\n  }\n  setBeaconSignals(signals) {\n    if (!this.beaconOverlays) {\n      this.initBeaconOverlays();\n    }\n    this.resetBeaconOverlays();\n    if (!signals) {\n      return;\n    }\n    let hSignal = undefined;\n    if (signals.length > 0) {\n      hSignal = signals[0];\n    }\n    for (let i = 1; i < signals.length; i++) {\n      if (signals[i].value > hSignal.value) {\n        hSignal = signals[i];\n      }\n    }\n    if (this.dialogRef && this.dialogRef.componentInstance) {\n      this.dialogRef.componentInstance.setNearestSignal(hSignal);\n    }\n    if (this.editMode.mode == BeaconEditModeT.DEFAULT) {\n      for (let i = 0; i < this.beaconFeatures.length; i++) {\n        this.beaconFeatures[i].setProperties({\n          signal: undefined\n        });\n        for (let j = 0; j < signals.length; j++) {\n          if (this.beaconFeatures[i].get(\"name\") == signals[j].name) {\n            this.beaconFeatures[i].setProperties({\n              signal: signals[j].value\n            });\n            if (signals[j].name == hSignal.name) {\n              this.setBeaconOverlay(i, this.beaconFeatures[i].getGeometry().getCoordinates(), '#' + signals[j].name + '#', signals[j].value, signals[j].origSignal);\n            } else {\n              this.setBeaconOverlay(i, this.beaconFeatures[i].getGeometry().getCoordinates(), signals[j].name, signals[j].value, signals[j].origSignal);\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n  deleteBeacon(beacon) {\n    console.log(\"MapBeacons::deleteBeacon: \" + JSON.stringify(beacon));\n    if (!USEHTTPSERVICE) {\n      console.log(\"Offline mode, dont delete beacon!\");\n      return;\n    }\n    if (beacon) {\n      this.mapService.deleteBeacon(beacon.id).subscribe(edge => this.beaconDeleted(edge), error => console.log(\"ERROR deletePoi: \" + error));\n    }\n  }\n  beaconDeleted(beacon) {\n    console.log(\"poiDeleted...\" + JSON.stringify(beacon));\n    let feature = this.layerSource.getFeatureById(beacon.id);\n    if (feature) {\n      this.layerSource.removeFeature(feature);\n      this.clearSelection();\n    }\n  }\n  setBeaconOverlay(index, position, name, value, orgvalue) {\n    console.log(\"MapBeacons::setBeaconOverlay: \" + index + \"#\" + JSON.stringify(position));\n    if (index < this.beaconOverlays.length && this.isActive) {\n      this.beaconOverlays[index].setPosition(position);\n      this.beaconTextFields[index].innerHTML = name + \":\" + value.toFixed(2) + \"/\" + orgvalue.toFixed(0);\n      if (index > this.lastOverlaysUsed) {\n        this.lastOverlaysUsed = index;\n      }\n    }\n  }\n  resetBeaconOverlays() {\n    if (!this.beaconOverlays) {\n      return;\n    }\n    for (let i = 0; i < this.beaconOverlays.length && i <= this.lastOverlaysUsed; i++) {\n      this.beaconOverlays[i].setPosition(undefined);\n      this.beaconTextFields[i].innerHTML = \"\";\n    }\n    this.lastOverlaysUsed = 0;\n  }\n  initBeaconOverlays() {\n    let base = this.beaconPopUpBaseElem.nativeElement;\n    //console.log(\"MapBeacons::initBeaconOverlays: \" + JSON.stringify(this.beaconPopUpBaseElem.nativeElement));\n    let childs = base.children;\n    let elemCount = childs.length;\n    console.log(\"MapBeacons::initBeaconOverlays: \" + elemCount);\n    this.beaconOverlays = new Array(elemCount);\n    this.beaconTextFields = new Array(elemCount);\n    let overlayDivs = [];\n    for (let i = 0; i < elemCount; i++) {\n      let OverlayDiv = childs[i].children[0];\n      overlayDivs.push(OverlayDiv);\n      //console.log(\"MapBeacons::initBeaconOverlays: NEW OVERLAY \" + i + \"#\" + OverlayDiv.className + \"#\");\n      //console.log(\"MapBeacons::initBeaconOverlays: \" + JSON.stringify(OverlayDiv));\n      let innerDiv = OverlayDiv.children[0];\n      //console.log(\"MapBeacons::initBeaconOverlays: \" + JSON.stringify(innerDiv));\n      let span = innerDiv.children[0];\n      //console.log(\"MapBeacons::initBeaconOverlays: \" + innerDiv.children.length);\n      this.beaconTextFields[i] = span;\n    }\n    for (let i = 0; i < overlayDivs.length; i++) {\n      //new ol.Overlay(/** @type {olx.OverlayOptions} */({\n      this.beaconOverlays[i] = new ol_Overlay({\n        element: overlayDivs[i],\n        autoPan: false\n      });\n      this.mapComponent.addOverlay(this.beaconOverlays[i]);\n    }\n  }\n  mouseClicked(position, pixelPos, map) {\n    this.lastMouseClickPosition = null;\n    if (this.currentFloorId >= 0) {\n      //   this.clearSelection();\n      if (this.editMode.mode == BeaconEditModeT.ADD) {\n        this.CreateNewBeacon(position);\n      } else {\n        let isSelected = this.selectBeacon(pixelPos, map, true);\n        if (isSelected) {\n          isSelected = this.selectBeacon(pixelPos, map, false);\n          if (isSelected) {\n            if (!this.highlightFeature) {\n              this.initHighlightFeatureOverlay(map);\n            }\n            this.highlightFeaturePoint.setCoordinates(this.currentSelectedBeacon.getGeometry().getCoordinates());\n            this.layerSource.addFeature(this.highlightFeature);\n            this.highlightFeatureAdded = true;\n            this.showSelectedBeaconInfo();\n          }\n        } else if (this.editMode.mode == BeaconEditModeT.MOVE && this.currentSelectedBeacon) {\n          this.moveCurrentBeacon(position);\n        } else {\n          this.clearSelection();\n        }\n      }\n    }\n  }\n  clearSelection() {\n    if (this.highlightFeature && this.highlightFeatureAdded) {\n      this.layerSource.removeFeature(this.highlightFeature);\n      this.highlightFeatureAdded = false;\n    }\n    this.currentSelectedBeacon = null;\n    this.showSelectedBeaconInfo();\n  }\n  selectBeacon(pixelPos, map, testOnly) {\n    //console.log(\"MapBeacons::selectBeacon!\" + JSON.stringify(pixelPos));\n    if (!testOnly) {\n      this.clearSelection();\n    }\n    let options = {\n      layerFilter: layer => this.testLayer(layer)\n    };\n    let feature = null;\n    feature = map.forEachFeatureAtPixel(pixelPos, function (feature) {\n      return feature;\n    }, options);\n    if (feature) {\n      //console.log(\"MapBeacons::selectBeacon Beacon selected! - \" + feature.get(\"name\"));\n      if (!testOnly) {\n        this.currentSelectedBeacon = feature;\n      }\n      return true;\n    }\n    return false;\n  }\n  testLayer(layer) {\n    return this.layer === layer;\n  }\n  showSelectedBeaconInfo() {\n    //console.log(\"MapBeacons::showSelectedBeaconInfo!\");\n    if (this.mapComponent) {\n      if (this.currentSelectedBeacon) {\n        this.mapComponent.setSelectedBeacon(new Beacon(this.currentSelectedBeacon.get(\"name\"), this.currentSelectedBeacon.getId()));\n      } else {\n        this.mapComponent.setSelectedBeacon(undefined);\n      }\n    }\n  }\n  moveCurrentBeacon(position) {\n    console.log(\"MapBeacons::moveCurrentBeacon... \" + JSON.stringify(position));\n    if (this.currentSelectedBeacon) {\n      this.currentSelectedBeacon.getGeometry().setCoordinates(position);\n      this.highlightFeature.getGeometry().setCoordinates(position);\n      this.mapService.updateBeacon(new ol_format_GeoJSON().writeFeature(this.currentSelectedBeacon), this.currentSelectedBeacon.getId()).subscribe(poi => this.beaconUpdated(poi), error => console.log(\"ERROR: \" + error));\n    }\n  }\n  initHighlightFeatureOverlay(map) {\n    this.highlightFeaturePoint = new ol_geom_Point([0, 0]);\n    this.highlightFeature = new ol_Feature({\n      geometry: this.highlightFeaturePoint,\n      name: 'SelectedPoi'\n    });\n    this.highlightFeature.setStyle(MapBeacons.higlightStyle);\n  }\n  beaconUpdated(beacon) {\n    console.log(\"MapBeacons::beaconUpdated Beacon Updated! - \" + JSON.stringify(beacon));\n  }\n  showBeacons(features) {\n    this.clearSelection();\n    this.clear();\n    this.resetBeaconOverlays();\n    //console.log(\"showBeacons! - \" + JSON.stringify(features));\n    /*\n        let dummy: Object =\n          {\n            \"type\": \"FeatureCollection\", \"features\":\n            [{ \"id\": 1, \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [1722109.0870171075, 5955257.0827844525] }, \"properties\": { \"mac\": \"00-00-00-00-00-01\", \"name\": \"N1\", \"deployed\": \"2017-06-29T10:18:46.040277Z\", \"seen\": \"2017-06-29T10:18:46.040319Z\", \"active\": false, \"charge\": \"0.00\", \"level\": 2 } },\n              { \"id\": 2, \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [1722094.6153389667, 5955238.592188362] }, \"properties\": { \"mac\": \"00-00-00-00-00-02\", \"name\": \"namexyz\", \"deployed\": \"2017-06-29T10:22:07.677524Z\", \"seen\": \"2017-06-29T10:22:07.677560Z\", \"active\": false, \"charge\": \"0.00\", \"level\": 2 } }]\n          };\n    */\n    this.beaconFeatures = new ol_format_GeoJSON().readFeatures(features);\n    //this.layerSource.addFeatures((new ol.format.GeoJSON()).readFeatures(features));\n    this.layerSource.addFeatures(this.beaconFeatures);\n  }\n  beaconDialogClosed(res) {\n    console.log(\"MapBeacons::beaconDialogClosed: \" + res);\n    if (res && res == \"Save\") {\n      console.log(\"MapBeacons::beaconDialogClosed: Save Beacon...\");\n      if (this.dialogRef && this.dialogRef.componentInstance) {\n        let dialogComp = this.dialogRef.componentInstance;\n        if (dialogComp.name && dialogComp.name.length > 0) {\n          console.log(\"MapBeacons::beaconDialogClosed: Save Beacon: \" + dialogComp.mac + \"/\" + dialogComp.name);\n          this.addOrUpdateBeacon(dialogComp.name);\n        }\n      }\n    }\n  }\n  CreateNewBeacon(position) {\n    console.log(\"MapBeacons::CreateNewBeacon: Add new beacon\" + JSON.stringify(position));\n    this.lastMouseClickPosition = position;\n    this.dialogRef = this.dialog.open(BeacondialogComponent);\n    this.dialogRef.componentInstance.setMacAndName(\"\", \"\");\n    this.dialogRef.afterClosed().subscribe(res => this.beaconDialogClosed(res));\n  }\n  addOrUpdateBeacon(name) {\n    if (this.currentFloorId < 0) {\n      return;\n    }\n    if (this.lastMouseClickPosition) {\n      //console.log(\"mouseClickedCtrl! - POS: \" + JSON.stringify(position));\n      let center = {\n        \"type\": \"Point\",\n        \"coordinates\": [this.lastMouseClickPosition[0], this.lastMouseClickPosition[1]]\n      };\n      console.log(\"MapBeacons ADD: #\" + name + \"#\" + this.currentFloorId + \"#\" + JSON.stringify(center));\n      this.mapService.addBeacon(this.currentFloorId, center, name).subscribe(beacon => this.updateAddBeacon(beacon), error => console.log(\"ERROR: \" + error));\n    }\n  }\n  updateAddBeacon(beacon) {\n    console.log(\"updateAddBeacon! - \" + JSON.stringify(beacon));\n    this.layerSource.addFeatures(new ol_format_GeoJSON().readFeatures(beacon));\n  }\n}\nMapBeacons.higlightObject = new ol_style_Circle({\n  radius: 8,\n  fill: null,\n  stroke: new ol_style_Stroke({\n    color: 'red',\n    width: 6\n  })\n});\nMapBeacons.higlightStyle = new ol_style_Style({\n  image: MapBeacons.higlightObject\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}