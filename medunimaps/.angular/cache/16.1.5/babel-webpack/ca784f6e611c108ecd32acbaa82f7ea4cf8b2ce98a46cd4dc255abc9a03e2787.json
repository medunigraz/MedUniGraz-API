{"ast":null,"code":"import { MapLayerBase } from './mapLayerBase';\nimport { OpenlayersHelper } from './openlayershelper';\nimport { MapRouteStyles } from './mapRouteStyles';\nimport ol_format_GeoJSON from 'ol/format/GeoJSON';\nexport class MapRoute extends MapLayerBase {\n  constructor(mapService) {\n    super();\n    this.mapService = mapService;\n    this.currentStartNodeId = -1;\n    this.currentFloorId = -1;\n    this.createRoute = false;\n    this.Initialize();\n  }\n  Initialize() {\n    let styleFunction = function (feature, currentFloor) {\n      let style = null;\n      try {\n        let source = feature.get(\"source_node\").properties.level;\n        let destination = feature.get(\"destination_node\").properties.level;\n        if (source == currentFloor || destination == currentFloor) {\n          style = MapRouteStyles.routeCurrentFloor;\n        }\n      } catch (e) {}\n      if (style) {\n        return style;\n      } else {\n        return MapRouteStyles.routeHiddenFloor;\n      }\n    };\n    let res = OpenlayersHelper.CreateBasicLayer(feature => styleFunction(feature, this.currentFloorId));\n    this.layerSource = res.layerSource;\n    this.layer = res.layer;\n  }\n  setNewStartPos(nodeId) {\n    this.currentStartNodeId = nodeId;\n  }\n  shiftPressed() {\n    this.createRoute = true;\n  }\n  shiftReleased() {\n    this.createRoute = false;\n  }\n  doShowRoute() {\n    return this.createRoute;\n  }\n  generateRoute(destinationNode) {\n    if (this.currentStartNodeId >= 0 && destinationNode >= 0) {\n      console.log(\"MapRoute::generateRoute From: \" + this.currentStartNodeId + \" to \" + destinationNode);\n      this.subscribeNewRequest(this.mapService.getRoute(this.currentStartNodeId, destinationNode).subscribe(route => this.updateRoute(route), error => console.log(\"ERROR: \" + error)));\n    }\n  }\n  clear() {\n    this.layerSource.clear();\n  }\n  setCurrentFloor(floor) {\n    this.currentFloorId = floor;\n    this.layerSource.refresh();\n  }\n  updateRoute(route) {\n    console.log(\"MapRoute::update Route\");\n    this.layerSource.clear();\n    this.layerSource.addFeatures(new ol_format_GeoJSON().readFeatures(route));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}