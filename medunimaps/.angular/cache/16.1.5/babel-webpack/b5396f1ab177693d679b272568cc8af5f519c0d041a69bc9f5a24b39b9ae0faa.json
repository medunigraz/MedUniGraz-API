{"ast":null,"code":"//import { Http, Response } from '@angular/http';\n//import { Headers, RequestOptions, RequestMethod, RequestOptionsArgs } from '@angular/http';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EMPTY, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { MapService } from '../mapservice/map.service';\nimport { Floor } from '../base/floor';\nimport { PoiType } from '../base/poitype';\nimport { API_BASE_URL } from '../base/globalconstants';\nimport { EdgeWeight } from '../base/edgeweight';\nimport { OAuthService } from 'angular-oauth2-oidc';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular-oauth2-oidc\";\nexport let MapHttpService = /*#__PURE__*/(() => {\n  class MapHttpService extends MapService {\n    //private requestOptions = {\n    //  params: new HttpParams()\n    //};\n    constructor(http, oauthService) {\n      super();\n      this.http = http;\n      this.oauthService = oauthService;\n      this.baseUrl = API_BASE_URL + '/v1/';\n      this.roomUrl = this.baseUrl + 'geo/rooms/'; // URL to web API\n      this.edgeUrl = this.baseUrl + 'geo/edges/';\n      this.floorUrl = this.baseUrl + 'geo/floors/';\n      this.nodeUrl = this.baseUrl + 'geo/nodes/';\n      this.doorUrl = this.baseUrl + 'geo/doors/';\n      this.levelUrl = this.baseUrl + 'geo/level/';\n      this.routeUrl = this.baseUrl + 'geo/routing/edges/';\n      this.poiTypeUrl = this.baseUrl + 'geo/pointofinterest/';\n      this.poiInstanceUrl = this.baseUrl + 'geo/pointofinterestinstance/';\n      this.edgeWeightTypeUrl = this.baseUrl + 'geo/edgecategory/';\n      this.beaconUrl = this.baseUrl + 'positioning/beacons/';\n      //this.requestOptions.params.set('Authorization', \"Bearer \" + this.oauthService.getAccessToken());\n      //this.requestOptions.params.set(\"Content-Type\", \"application/json\");\n    }\n\n    getRooms(layer) {\n      /*\n      return this.http.get(this.roomUrl + '?level=' + layer)\n        .map(this.extractData)\n        .catch(this.handleError);\n      */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.get(this.roomUrl + '?level=' + layer, rqOptions).pipe(map(res => this.extractData(res)), catchError(this.handleError('getRooms', [])));\n    }\n    getNavigationEdges(layer) {\n      //var headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //const requestOptions = {\n      //  params: new HttpParams()\n      //};\n      //let options = new RequestOptions({ headers: headers });\n      //let options = requestOptions;\n      //requestOptions.params.set('Authorization', \"Bearer \" + this.oauthService.getAccessToken());\n      /*\n          return this.http.get(this.edgeUrl + '?level=' + layer, this.requestOptions)\n            .map(this.extractData)\n            .catch(this.handleError);\n            */\n      //return EMPTY;\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.get(this.edgeUrl + '?level=' + layer, rqOptions).pipe(map(res => this.extractData(res)), catchError(this.handleError('getNavigationEdges', [])));\n    }\n    getNavigationNodes(layer) {\n      //var headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      /*\n          return this.http.get(this.nodeUrl + '?level=' + layer, this.requestOptions)\n            .map(this.extractData)\n            .catch(this.handleError);\n            */\n      //this.requestOptions.params.set('Authorization', \"Bearer \" + this.oauthService.getAccessToken());\n      //this.requestOptions.params.set(\"Content-Type\", \"application/json\");\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      //console.log(\"MapService::getNavigationNodes() - OPTIONS: \" + JSON.stringify(rqOptions));\n      //console.log(\"MapService::getNavigationNodes() - VALID: \" + this.oauthService.hasValidAccessToken());\n      //console.log(\"MapService::getNavigationNodes() - TOKEN: \" + JSON.stringify(this.oauthService.getAccessToken()));\n      return this.http.get(this.nodeUrl + '?level=' + layer, rqOptions).pipe(map(res => this.extractData(res)), catchError(this.handleError('getNavigationNodes', [])));\n    }\n    getFloorNames() {\n      /*\n      return this.http.get(this.levelUrl)\n        .map(this.extractDataFloors)\n        .catch(this.handleError);\n        */\n      //console.log(\"MapService::getFloorNames() - \");\n      return this.http.get(this.levelUrl).pipe(map(res => this.extractDataFloors(res)), catchError(this.handleError('getFloorNames', [])));\n      //return EMPTY;\n    }\n\n    getDoors(layer) {\n      /*\n      //return this.http.get(this.roomUrl + '?floor=' + layer)\n      return this.http.get(this.doorUrl + '?level=' + layer)\n        .map(this.extractData)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.get(this.doorUrl + '?level=' + layer, rqOptions).pipe(map(res => this.extractData(res)), catchError(this.handleError('getDoors', [])));\n    }\n    getFloors(layer) {\n      /*\n      //return this.http.get(this.roomUrl + '?floor=' + layer)\n      return this.http.get(this.floorUrl + '?level=' + layer)\n        .map(this.extractData)\n        .catch(this.handleError);\n        */\n      return this.http.get(this.floorUrl + '?level=' + layer).pipe(map(res => this.extractData(res)), catchError(this.handleError('getFloors', [])));\n      //return this.http.get<Object>(this.floorUrl + '?level=' + layer);\n    }\n\n    getRoute(sourceNodeId, destinationNodeId) {\n      /*\n      console.log(\"Get Route HTTP!\");\n      return this.http.get(this.routeUrl + '?from=' + sourceNodeId + '&to=' + destinationNodeId)\n        .map(this.extractData)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.get(this.routeUrl + '?from=' + sourceNodeId + '&to=' + destinationNodeId, rqOptions).pipe(map(res => this.extractData(res)), catchError(this.handleError('getRoute', [])));\n    }\n    getPoiTypes() {\n      /*\n      return this.http.get(this.poiTypeUrl)\n        .map(this.extractDataPoiTypes)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.get(this.poiTypeUrl, rqOptions).pipe(map(res => this.extractDataPoiTypes(res)), catchError(this.handleError('getPoiTypes', [])));\n    }\n    getEdgeWeightTypes() {\n      //var headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      /*\n          return this.http.get<EdgeWeight[]>(this.edgeWeightTypeUrl, this.requestOptions)\n            .pipe(\n            catchError(this.handleError)\n            );\n                 */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.get(this.edgeWeightTypeUrl, rqOptions).pipe(map(res => this.extractDataEdgeWeightTypes(res)), catchError(this.handleError('getEdgeWeightTypes', [])));\n      //return this.http.get(this.edgeWeightTypeUrl, this.requestOptions)\n      //  .map(this.extractDataEdgeWeightTypes)\n      //  .catch(this.handleError);\n    }\n\n    getPoiInstances(layer) {\n      /*\n      return this.http.get(this.poiInstanceUrl + '?level=' + layer)\n        .map(this.extractData)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.get(this.poiInstanceUrl + '?level=' + layer, rqOptions).pipe(map(res => this.extractData(res)), catchError(this.handleError('getPoiInstances', [])));\n    }\n    getBeacons(layer) {\n      //var headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      /*\n      return this.http.get(this.beaconUrl + '?level=' + layer, this.requestOptions)\n        .map(this.extractData)\n        .catch(this.handleError);\n        */\n      /*\n      let rqOptions = {\n      headers: new HttpHeaders({\n        \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n        \"Content-Type\": \"application/json\"\n      })\n      };\n         return this.http.get<Object>(this.beaconUrl + '?level=' + layer, rqOptions)\n      .pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError('getBeacons', []))\n      );*/\n      return EMPTY;\n    }\n    addEdge(source, destination, length, path) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      let data = {\n        \"category\": 1,\n        \"source\": source,\n        \"destination\": destination,\n        \"path\": JSON.stringify(path),\n        \"length\": length\n      };\n      //console.log(\"Send Edge: \" + JSON.stringify(data));\n      /*\n           return this.http.post(this.edgeUrl, data, this.requestOptions)\n        .map(this.extractDataAdd)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.post(this.edgeUrl, data, rqOptions).pipe(map(res => this.extractDataAdd(res)), catchError(this.handleError('addEdge', [])));\n    }\n    addNode(floor, center) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      let data = {\n        \"level\": floor,\n        \"center\": JSON.stringify(center)\n      };\n      console.log(\"Send Node: \" + JSON.stringify(data));\n      /*\n      return this.http.post(this.nodeUrl, data, this.requestOptions)\n        .map(this.extractDataAdd)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.post(this.nodeUrl, data, rqOptions).pipe(map(res => this.extractDataAdd(res)), catchError(this.handleError('addNode', [])));\n    }\n    addPoiInstance(floor, center, poitypeid) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      let data = {\n        \"level\": floor,\n        \"name\": poitypeid,\n        \"center\": JSON.stringify(center)\n      };\n      console.log(\"Send PoiInstance: \" + JSON.stringify(data));\n      /*\n           return this.http.post(this.poiInstanceUrl, data, this.requestOptions)\n        .map(this.extractDataAdd)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.post(this.poiInstanceUrl, data, rqOptions).pipe(map(res => this.extractDataAdd(res)), catchError(this.handleError('addPoiInstance', [])));\n    }\n    addBeacon(floor, center, name) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      let data = {\n        \"level\": floor,\n        \"name\": name,\n        \"position\": JSON.stringify(center),\n        \"active\": true\n      };\n      console.log(\"Send Beacon: \" + JSON.stringify(data));\n      /*\n           return this.http.post(this.beaconUrl, data, this.requestOptions)\n        .map(this.extractDataAdd)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.post(this.beaconUrl, data, rqOptions).pipe(map(res => this.extractDataAdd(res)), catchError(this.handleError('addBeacon', [])));\n    }\n    deleteNode(id) {\n      //let headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({\n      //  headers: headers,\n      //});\n      /*\n           return this.http.delete(this.nodeUrl + id + \"/\", this.requestOptions)\n        .map(response => this.extractDataDel(response, id))\n        .catch(this.handleError);\n             */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.delete(this.nodeUrl + id + \"/\", rqOptions).pipe(map(res => this.extractDataDel(res, id)), catchError(this.handleError('deleteNode', [])));\n    }\n    deleteEdge(id) {\n      //let headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({\n      //  headers: headers,\n      //});\n      /*\n           return this.http.delete(this.edgeUrl + id + \"/\", this.requestOptions)\n        .map(response => this.extractDataDel(response, id))\n        .catch(this.handleError);\n             */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.delete(this.edgeUrl + id + \"/\", rqOptions).pipe(map(res => this.extractDataDel(res, id)), catchError(this.handleError('deleteEdge', [])));\n    }\n    deletePoi(id) {\n      //let headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({\n      //  headers: headers,\n      //});\n      /*\n           return this.http.delete(this.poiInstanceUrl + id + \"/\", this.requestOptions)\n        .map(response => this.extractDataDel(response, id))\n        .catch(this.handleError);\n             */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.delete(this.poiInstanceUrl + id + \"/\", rqOptions).pipe(map(res => this.extractDataDel(res, id)), catchError(this.handleError('deletePoi', [])));\n    }\n    deleteBeacon(id) {\n      //let headers = new Headers({\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({\n      //  headers: headers,\n      //});\n      /*\n           return this.http.delete(this.beaconUrl + id + \"/\", this.requestOptions)\n        .map(response => this.extractDataDel(response, id))\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.delete(this.beaconUrl + id + \"/\", rqOptions).pipe(map(res => this.extractDataDel(res, id)), catchError(this.handleError('deleteBeacon', [])));\n    }\n    updateEdge(edge, id) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      //console.log(\"Update Edge: \" + id + \"::\" + JSON.stringify(edge));\n      /*\n           return this.http.put(this.edgeUrl + id + \"/\", edge, this.requestOptions)\n        .map(this.extractDataAdd)\n        .catch(this.handleError);\n        */\n      return EMPTY;\n    }\n    updateNode(node, id) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      //console.log(\"Update Node: \" + id + \"::\" + JSON.stringify(node));\n      /*\n           return this.http.put(this.nodeUrl + id + \"/\", node, this.requestOptions)\n        .map(this.extractDataAdd)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.put(this.nodeUrl + id + \"/\", node, rqOptions).pipe(map(res => this.extractDataAdd(res)), catchError(this.handleError('updateNode', [])));\n    }\n    updatePoi(node, id) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      //console.log(\"Update Poi: \" + id + \"::\" + JSON.stringify(node));\n      /*\n               return this.http.put(this.poiInstanceUrl + id + \"/\", node, this.requestOptions)\n            .map(this.extractDataAdd)\n            .catch(this.handleError);\n            */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.put(this.poiInstanceUrl + id + \"/\", node, rqOptions).pipe(map(res => this.extractDataAdd(res)), catchError(this.handleError('updatePoi', [])));\n    }\n    updateBeacon(beacon, id) {\n      //let headers = new Headers({\n      //  \"Content-Type\": \"application/json\",\n      //  \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken()\n      //});\n      //let options = new RequestOptions({ headers: headers });\n      //console.log(\"Update Poi: \" + id + \"::\" + JSON.stringify(node));\n      /*\n           return this.http.put(this.beaconUrl + id + \"/\", beacon, this.requestOptions)\n        .map(this.extractDataAdd)\n        .catch(this.handleError);\n        */\n      let rqOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": \"Bearer \" + this.oauthService.getAccessToken(),\n          \"Content-Type\": \"application/json\"\n        })\n      };\n      return this.http.put(this.beaconUrl + id + \"/\", beacon, rqOptions).pipe(map(res => this.extractDataAdd(res)), catchError(this.handleError('updateBeacon', [])));\n    }\n    extractData(res) {\n      //console.log(\"RESPONSE DATA...\");\n      //let body = res.json();\n      let body = res;\n      //console.log(\"RESPONSE DATA: \" + JSON.stringify(body));\n      if (body.results) {\n        return body.results || {};\n      }\n      return body || {};\n    }\n    extractDataAdd(res) {\n      //let body = res.json();\n      let body = res;\n      //console.log(\"RESPONSE DATA: \" + JSON.stringify(body));\n      return body || {};\n    }\n    extractDataDel(res, id) {\n      //console.log(\"RESPONSE DATA org: \" + JSON.stringify(res));\n      return {\n        id: id\n      };\n    }\n    extractDataFloors(res) {\n      //let body = res.json();\n      let body = res;\n      if (body.results) {\n        body = body.results;\n      }\n      console.log(\"RESPONSE DATA FLOORS: \" + JSON.stringify(body));\n      let floors = [];\n      for (let obj of body) {\n        floors.push(new Floor(obj));\n      }\n      return floors;\n    }\n    extractDataPoiTypes(res) {\n      //let body = res.json();\n      let body = res;\n      if (body.results) {\n        body = body.results;\n      }\n      console.log(\"RESPONSE DATA POITYPES: \" + JSON.stringify(body));\n      let poitypes = [];\n      for (let obj of body) {\n        poitypes.push(new PoiType(obj));\n      }\n      return poitypes;\n    }\n    extractDataEdgeWeightTypes(res) {\n      //let body = res.json();\n      let body = res;\n      if (body.results) {\n        body = body.results;\n      }\n      console.log(\"RESPONSE DATA EDGEWEIGHTS: \" + JSON.stringify(body));\n      let edgeweights = [];\n      for (let obj of body) {\n        edgeweights.push(new EdgeWeight(obj));\n      }\n      return edgeweights;\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        console.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n  }\n  MapHttpService.ɵfac = function MapHttpService_Factory(t) {\n    return new (t || MapHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OAuthService));\n  };\n  MapHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapHttpService,\n    factory: MapHttpService.ɵfac\n  });\n  return MapHttpService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}