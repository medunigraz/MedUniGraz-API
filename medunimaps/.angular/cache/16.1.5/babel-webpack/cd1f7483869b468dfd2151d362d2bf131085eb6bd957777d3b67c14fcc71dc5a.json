{"ast":null,"code":"import { EventEmitter, NgZone } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { SignalBufferCollection } from './signalbuffercollection';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/legacy-button\";\nimport * as i3 from \"@angular/material/icon\";\nfunction BeaconconnectorComponent_div_0_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 4)(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"location_disabled\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction BeaconconnectorComponent_div_0_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function BeaconconnectorComponent_div_0_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.scanButtonClickedPosition());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"location_searching\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction BeaconconnectorComponent_div_0_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function BeaconconnectorComponent_div_0_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.scanButtonClickedPosition());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"gps_fixed\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction BeaconconnectorComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, BeaconconnectorComponent_div_0_button_1_Template, 3, 0, \"button\", 2);\n    i0.ɵɵtemplate(2, BeaconconnectorComponent_div_0_button_2_Template, 3, 0, \"button\", 3);\n    i0.ɵɵtemplate(3, BeaconconnectorComponent_div_0_button_3_Template, 3, 0, \"button\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.positionStatus == 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.positionStatus == 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.positionStatus == 2);\n  }\n}\nvar PositionStatus = /*#__PURE__*/function (PositionStatus) {\n  PositionStatus[PositionStatus[\"InActive\"] = 0] = \"InActive\";\n  PositionStatus[PositionStatus[\"Paused\"] = 1] = \"Paused\";\n  PositionStatus[PositionStatus[\"Active\"] = 2] = \"Active\";\n  return PositionStatus;\n}(PositionStatus || {});\nconst demoMode = false;\nexport let BeaconconnectorComponent = /*#__PURE__*/(() => {\n  class BeaconconnectorComponent {\n    constructor(zone) {\n      this.zone = zone;\n      this.updateSignalsEvent = new EventEmitter();\n      this.isActive = demoMode;\n      this.positionStatus = PositionStatus.InActive;\n      this.positioningStarted = false;\n      this.signalBufferCollection = new SignalBufferCollection();\n      window[\"angularComponentRef\"] = {\n        zone: this.zone,\n        componentFn: value => this.signalDataChanged(value),\n        component: this\n      };\n    }\n    ngOnInit() {\n      let hasAppInterface = appInterfaceObject.testapp();\n      //hasAppInterface = true;\n      if (hasAppInterface) {\n        this.isActive = true;\n      }\n    }\n    ngAfterViewInit() {\n      this.startCheckTimer();\n    }\n    scanButtonClickedPosition() {\n      console.log(\"BeaconconnectorComponent::scanButtonClickedPosition()\");\n      this.positioningStarted = !this.positioningStarted;\n      this.updatePositionStatus();\n      if (this.positioningStarted) {\n        this.startScan();\n      } else {\n        this.stopScan();\n      }\n    }\n    signalDataChanged(value) {\n      if (this.positionStatus == PositionStatus.Active) {\n        //console.log(\"BeaconconnectorComponent::signalDataChanged() - \" + JSON.stringify(value));\n        this.signalBufferCollection.addValues(value);\n      }\n    }\n    startScan() {\n      this.signalBufferCollection.clear();\n      this.signalBufferCollection.start();\n      this.startPosUpdateTimer();\n      appInterfaceObject.start();\n      if (demoMode) {\n        appInterfaceObject.demo();\n      }\n    }\n    stopScan() {\n      this.stopPosUpdateTimer();\n      appInterfaceObject.stop();\n      this.signalBufferCollection.clear();\n      this.updateSignalsEvent.emit([]);\n    }\n    /**********************************************************\r\n    POSTION UPDATE\r\n    **********************************************************/\n    startPosUpdateTimer() {\n      //console.log(\"BeaconconnectorComponent::startPosUpdateTimer()\");\n      if (this.posUpdateTimerSubscription != null) {\n        this.stopPosUpdateTimer();\n      }\n      let timerO = timer(1000);\n      this.posUpdateTimerSubscription = timerO.subscribe(t => {\n        this.posUpdateEvent();\n      });\n    }\n    stopPosUpdateTimer() {\n      //console.log(\"BeaconconnectorComponent::stopPosUpdateTimer()\");\n      if (this.posUpdateTimerSubscription != null) {\n        this.posUpdateTimerSubscription.unsubscribe();\n        this.posUpdateTimerSubscription = null;\n      }\n    }\n    posUpdateEvent() {\n      //console.log(\"BeaconconnectorComponent::posUpdateEvent()\");\n      let signals = this.signalBufferCollection.getAllSignals();\n      //console.log(\"BeaconconnectorComponent::posUpdateEvent()\" + JSON.stringify(signals));\n      this.updateSignalsEvent.emit(signals);\n      //LOG POSITION DATA\n      //appInterfaceObject.log(\"\" + new Date().getTime() + \";\" + nearestBeacon + \";\" + this.signalBufferCollection.getJSONString());\n      this.stopPosUpdateTimer();\n      if (this.isActive) {\n        this.startPosUpdateTimer();\n      }\n    }\n    /**********************************************************\r\n    CHECK STATUS\r\n    **********************************************************/\n    startCheckTimer() {\n      //console.log(\"PositionComponent::startCheckTimer()\");\n      if (this.checkTimerSubscription != null) {\n        this.stopCheckTimer();\n      }\n      let timerO = timer(2500);\n      this.checkTimerSubscription = timerO.subscribe(t => {\n        this.checkTimerEvent();\n      });\n    }\n    stopCheckTimer() {\n      //console.log(\"PositionComponent::stopCheckTimer()\");\n      if (this.checkTimerSubscription != null) {\n        this.checkTimerSubscription.unsubscribe();\n        this.checkTimerSubscription = null;\n      }\n    }\n    checkTimerEvent() {\n      //console.log(\"PositionComponent::checkTimerEvent()\");\n      this.updatePositionStatus();\n      this.stopCheckTimer();\n      if (this.isActive) {\n        this.startCheckTimer();\n      }\n    }\n    updatePositionStatus() {\n      //console.log(\"PositionComponent::updatePositionStatus()\" + appInterfaceObject.check());\n      if (appInterfaceObject.check() != 0 && !demoMode) {\n        this.positionStatus = PositionStatus.InActive;\n      } else {\n        if (this.positioningStarted) {\n          this.positionStatus = PositionStatus.Active;\n        } else {\n          this.positionStatus = PositionStatus.Paused;\n        }\n      }\n    }\n  }\n  BeaconconnectorComponent.ɵfac = function BeaconconnectorComponent_Factory(t) {\n    return new (t || BeaconconnectorComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  BeaconconnectorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BeaconconnectorComponent,\n    selectors: [[\"app-beaconconnector\"]],\n    outputs: {\n      updateSignalsEvent: \"updateSignalsEvent\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"positionindicator\", 4, \"ngIf\"], [1, \"positionindicator\"], [\"mat-mini-fab\", \"\", \"class\", \"positionbutton\", 4, \"ngIf\"], [\"mat-mini-fab\", \"\", \"class\", \"positionbutton\", 3, \"click\", 4, \"ngIf\"], [\"mat-mini-fab\", \"\", 1, \"positionbutton\"], [\"mat-mini-fab\", \"\", 1, \"positionbutton\", 3, \"click\"]],\n    template: function BeaconconnectorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, BeaconconnectorComponent_div_0_Template, 4, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isActive);\n      }\n    },\n    dependencies: [i1.NgIf, i2.MatLegacyButton, i3.MatIcon],\n    styles: [\".positionindicator[_ngcontent-%COMP%]{position:fixed;bottom:3.5em;right:.5em}.positionbutton[_ngcontent-%COMP%]{background-color:#fff}\"]\n  });\n  return BeaconconnectorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}