{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { MapService } from '../mapservice/map.service';\nimport { MapHttpService } from '../mapservicehttp/mapservicehttp.service';\nimport { USEHTTPSERVICE } from '../base/globalconstants';\nimport { ApplicationMode } from '../base/applicationmode';\nimport { ApplicationModeT } from '../base/applicationmode';\nimport { Floor } from '../base/floor';\nimport { PoiType } from '../base/poitype';\nimport { BeaconEditMode } from '../base/beaconeditmode';\nimport { Beacon } from '../base/beacon';\nimport { EdgeWeight } from '../base/edgeweight';\nimport { MapNodes } from './mapNodes';\nimport { MapDoors } from './mapDoors';\nimport { MapRoom } from './mapRoom';\nimport { MapFloor } from './mapFloor';\nimport { MapEdges } from './mapEdges';\nimport { MapEditEdges } from './mapEditEdges';\nimport { MapRoute } from './mapRoute';\nimport { MapPois } from './mapPois';\nimport { MapBeacons } from './mapBeacons';\nimport { OpenlayersHelper } from './openlayershelper';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport ol_Map from 'ol/Map';\nimport ol_layer_Tile from 'ol/layer/Tile';\nimport ol_source_OSM from 'ol/source/OSM';\nimport ol_View from 'ol/View';\nimport { defaults as defaultControls } from 'ol/control';\nimport { fromLonLat as ol_proj_fromLonLat } from 'ol/proj';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/legacy-dialog\";\nimport * as i2 from \"../mapservicehttp/mapservicehttp.service\";\nimport * as i3 from \"../mapservice/map.service\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"beaconPopups\"];\nfunction EditablemapComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 4)(2, \"div\", 5);\n    i0.ɵɵelement(3, \"span\", 6);\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst maxNumberOfBeaconOverlays = 100;\nexport let EditablemapComponent = /*#__PURE__*/(() => {\n  class EditablemapComponent {\n    constructor(dialog, mapServiceHttp, mapService) {\n      this.dialog = dialog;\n      this.mapServiceHttp = mapServiceHttp;\n      this.mapService = mapService;\n      this.selectedBeaconEvt = new EventEmitter();\n      this.beaconOverlays = null;\n      this.mapNodes = null;\n      this.mapDoors = null;\n      this.mapRooms = null;\n      this.mapFloor = null;\n      this.mapEdges = null;\n      this.mapEditEdges = null;\n      this.mapRoute = null;\n      this.mapPois = null;\n      this.mapBeacons = null;\n      this.ctlPressed = false;\n      this.lastFloor = undefined;\n      this.beaconOverlays = new Array(maxNumberOfBeaconOverlays);\n      for (let i = 0; i < maxNumberOfBeaconOverlays; i++) {\n        this.beaconOverlays[i] = i;\n      }\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      if (USEHTTPSERVICE) {\n        this.mapService = this.mapServiceHttp;\n      }\n      this.mapFloor = new MapFloor(this.mapService);\n      this.mapDoors = new MapDoors(this.mapService);\n      this.mapRooms = new MapRoom(this.mapService);\n      this.mapEdges = new MapEdges(this.mapService);\n      this.mapEditEdges = new MapEditEdges(this.mapService);\n      this.mapRoute = new MapRoute(this.mapService);\n      this.mapNodes = new MapNodes(this.mapService, this.mapEditEdges, this.mapEdges, this.mapRoute);\n      this.mapPois = new MapPois(this.mapService);\n      this.mapBeacons = new MapBeacons(this.dialog, this.mapService, this.beaconPopUps, this);\n      this.map = new ol_Map({\n        controls: defaultControls({\n          attributionOptions: {\n            collapsible: true\n          },\n          zoom: false\n        }),\n        //interactions: ol.interaction.defaults().extend([this.select, this.modify]),\n        //controls: [],\n        layers: [new ol_layer_Tile({\n          source: new ol_source_OSM()\n        }), this.mapFloor.getLayer(), this.mapRooms.getLayer(), this.mapDoors.getLayer(), this.mapNodes.getLayer(), this.mapBeacons.getLayer(), this.mapEditEdges.getLayer(), this.mapEdges.getLayer(), this.mapRoute.getLayer(), this.mapPois.getMarkerLayer(), this.mapPois.getLayer()],\n        overlays: [],\n        target: 'map',\n        view: new ol_View({\n          projection: 'EPSG:900913',\n          center: ol_proj_fromLonLat([15.47, 47.0805]),\n          //center: ol.extent.getCenter(extent),\n          zoom: 18,\n          maxZoom: 24,\n          minZoom: 1,\n          constrainResolution: true\n        })\n      });\n      this.mapNodes.extendMap(this.map);\n      this.map.on('click', evt => this.mapClicked(evt));\n      this.map.on('pointermove', evt => this.mapMouseMoved(evt));\n      this.updateLayers();\n    }\n    set applicationMode(applicationMode) {\n      OpenlayersHelper.CurrentApplicationMode = applicationMode;\n      console.log(\"EditAbleMapComponent::Set applicationMode - New App Mode: \" + OpenlayersHelper.CurrentApplicationMode.name);\n      if (this.mapEdges) {\n        this.mapEdges.setWeightMode(OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_WEIGHTS);\n      }\n      this.updateLayers();\n      this.currentFloor = this.lastFloor;\n    }\n    set currentFloor(currentFloor) {\n      console.log(\"EditAbleMapComponent::Set currentFloor - New Floor: \" + JSON.stringify(currentFloor));\n      this.lastFloor = currentFloor;\n      if (currentFloor && currentFloor.id >= 0) {\n        this.mapFloor.updateData(currentFloor.id);\n        this.mapRooms.updateData(currentFloor, OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES);\n        this.mapDoors.updateData(currentFloor.id);\n        this.mapEdges.updateData(currentFloor, OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES);\n        this.mapNodes.updateData(currentFloor, OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES);\n        this.mapRoute.setCurrentFloor(currentFloor.id);\n        this.mapBeacons.updateData(currentFloor.id);\n        this.mapPois.setCurrentFloor(currentFloor.id);\n        this.mapPois.updateData(currentFloor.id);\n      }\n    }\n    set currentPoiType(poitype) {\n      if (poitype) {\n        console.log(\"EditAbleMapComponent::Set currentPoiType: \" + JSON.stringify(poitype));\n        this.mapPois.setCurrentSelectedPoiType(poitype);\n      }\n    }\n    set poiTypes(poitypes) {\n      if (poitypes) {\n        console.log(\"EditAbleMapComponent::Set poiTypes: \" + JSON.stringify(poitypes));\n        this.mapPois.setPoiTypes(poitypes);\n      }\n    }\n    set beaconEditMode(mode) {\n      if (mode) {\n        this.mapBeacons.setBeaconEditMode(mode);\n      }\n    }\n    set setBeaconSignals(signals) {\n      if (signals) {\n        this.mapBeacons.setBeaconSignals(signals);\n      }\n    }\n    set deleteBeacon(beacon) {\n      if (this.mapBeacons) {\n        this.mapBeacons.deleteBeacon(beacon);\n      }\n    }\n    set currentEdgeWeight(edgeWeight) {\n      if (edgeWeight) {\n        console.log(\"EditAbleMapComponent::Set currentEdgeWeight: \" + JSON.stringify(edgeWeight));\n        this.mapEdges.setCurrentEdgeWeight(edgeWeight);\n      }\n    }\n    set edgeWeights(edgeWeights) {\n      if (edgeWeights) {\n        console.log(\"EditAbleMapComponent::Set edgeWeights: \" + JSON.stringify(edgeWeights));\n        this.mapEdges.setEdgeWeights(edgeWeights);\n      }\n    }\n    keyboardInput(event) {\n      //console.log(\"KEYDOWN: \" + event.keyCode);\n      if (event.keyCode == 17 && !this.ctlPressed) {\n        this.ctlPressed = true;\n        this.mapNodes.ctlPressed();\n      }\n      if (event.keyCode == 16) {\n        this.mapRoute.shiftPressed();\n      }\n    }\n    /*\n      @HostListener('window:keypress', ['$event'])\n      keyboardKeyPress(event: KeyboardEvent) {\n        console.log(\"KEYPRESS: \" + event.keyCode);\n      }*/\n    keyboardKeyUp(event) {\n      console.log(\"KEYUP: \" + event.keyCode);\n      if (event.keyCode == 17) {\n        this.ctlPressed = false;\n        this.mapNodes.ctlReleased();\n      }\n      if ((OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_NODES || OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES) && event.keyCode == 46)\n        //Entf Key\n        {\n          console.log(\"Delete selected Edges and Nodes...\");\n          this.mapNodes.deleteSelectedNodes();\n          this.mapEdges.deleteSelectedEdges();\n        }\n      if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_POIS && event.keyCode == 46)\n        //Entf Key\n        {\n          this.mapPois.deleteSelectedPoi();\n        }\n      if (event.keyCode == 16) {\n        this.mapRoute.shiftReleased();\n      }\n      if ((OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_NODES || OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES) && event.keyCode == 88) {\n        //x Key\n        this.mapRoute.clear();\n      }\n    }\n    addOverlay(overlay) {\n      this.map.addOverlay(overlay);\n    }\n    setSelectedBeacon(beacon) {\n      this.selectedBeaconEvt.emit(beacon);\n    }\n    mapMouseMoved(evt) {\n      //if (evt.dragging) {\n      //  return;\n      //}\n      let pixel = this.map.getEventPixel(evt.originalEvent);\n      if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_NODES || OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES) {\n        this.mapNodes.mouseMoved(pixel, evt.coordinate, this.map);\n      } else if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_WEIGHTS) {\n        this.mapEdges.updateMouseMoved(pixel, this.map, true);\n      }\n    }\n    mapClicked(evt) {\n      //console.log(\"mapClicked called\");\n      //let lonlat = ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');\n      //console.log(\"Coord: \" + lonlat);\n      console.log(\"Coord Org: \" + evt.coordinate + \" strg: \" + evt.originalEvent.ctrlKey + \" shift: \" + evt.originalEvent.shiftKey);\n      let pixel = this.map.getEventPixel(evt.originalEvent);\n      if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_NODES || OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES) {\n        this.mapNodes.mouseClicked(evt.coordinate, this.map);\n      } else if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_POIS) {\n        this.mapPois.mouseClicked(evt.coordinate, pixel, evt.originalEvent.ctrlKey, evt.originalEvent.shiftKey, this.map);\n      } else if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_BEACONS) {\n        this.mapBeacons.mouseClicked(evt.coordinate, pixel, this.map);\n      } else if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_WEIGHTS) {\n        this.mapEdges.updateMouseClicked(this.map);\n      }\n    }\n    updateLayers() {\n      this.setLayerActive(this.mapEdges, false);\n      this.setLayerActive(this.mapEditEdges, false);\n      this.setLayerActive(this.mapNodes, false);\n      this.setLayerActive(this.mapRoute, false);\n      this.setLayerActive(this.mapPois, false);\n      this.setLayerActive(this.mapBeacons, false);\n      if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_NODES || OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_MULTIFLOOR_EDGES) {\n        this.setLayerActive(this.mapEdges, true);\n        this.setLayerActive(this.mapEditEdges, true);\n        this.setLayerActive(this.mapNodes, true);\n        this.setLayerActive(this.mapRoute, true);\n      } else if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_POIS) {\n        this.setLayerActive(this.mapPois, true);\n      } else if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_BEACONS) {\n        this.setLayerActive(this.mapBeacons, true);\n      } else if (OpenlayersHelper.CurrentApplicationMode.mode == ApplicationModeT.EDIT_WEIGHTS) {\n        this.setLayerActive(this.mapEdges, true);\n      }\n    }\n    setLayerActive(layer, active) {\n      if (layer) {\n        layer.setActive(active);\n      }\n    }\n  }\n  EditablemapComponent.ɵfac = function EditablemapComponent_Factory(t) {\n    return new (t || EditablemapComponent)(i0.ɵɵdirectiveInject(i1.MatLegacyDialog), i0.ɵɵdirectiveInject(i2.MapHttpService), i0.ɵɵdirectiveInject(i3.MapService));\n  };\n  EditablemapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditablemapComponent,\n    selectors: [[\"app-editablemap\"]],\n    viewQuery: function EditablemapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.beaconPopUps = _t.first);\n      }\n    },\n    hostBindings: function EditablemapComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function EditablemapComponent_keydown_HostBindingHandler($event) {\n          return ctx.keyboardInput($event);\n        }, false, i0.ɵɵresolveWindow)(\"keyup\", function EditablemapComponent_keyup_HostBindingHandler($event) {\n          return ctx.keyboardKeyUp($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      applicationMode: \"applicationMode\",\n      currentFloor: \"currentFloor\",\n      currentPoiType: \"currentPoiType\",\n      poiTypes: \"poiTypes\",\n      beaconEditMode: \"beaconEditMode\",\n      setBeaconSignals: \"setBeaconSignals\",\n      deleteBeacon: \"deleteBeacon\",\n      currentEdgeWeight: \"currentEdgeWeight\",\n      edgeWeights: \"edgeWeights\"\n    },\n    outputs: {\n      selectedBeaconEvt: \"selectedBeaconEvt\"\n    },\n    decls: 4,\n    vars: 1,\n    consts: [[\"id\", \"map\", 1, \"map\"], [1, \"beacon-ol-popups_parent\"], [\"beaconPopups\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"beacon-ol-popup\"], [1, \"beacon-popup-content\"], [1, \"beacon-popup-content-span\"]],\n    template: function EditablemapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1, 2);\n        i0.ɵɵtemplate(3, EditablemapComponent_div_3_Template, 4, 0, \"div\", 3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.beaconOverlays);\n      }\n    },\n    dependencies: [i4.NgForOf],\n    styles: [\".map[_ngcontent-%COMP%]{position:absolute;inset:0;z-index:0}.beacon-ol-popups_parent[_ngcontent-%COMP%]{position:absolute}.beacon-ol-popup[_ngcontent-%COMP%]{position:absolute;background-color:#fff;filter:drop-shadow(0 1px 4px rgba(0,0,0,.2));padding:.2em;border-radius:10px;border:1px solid #cccccc;bottom:12px;left:-50px;min-width:4em;max-width:8em}.beacon-ol-popup[_ngcontent-%COMP%]:after, .beacon-ol-popup[_ngcontent-%COMP%]:before{top:100%;border:solid transparent;content:\\\" \\\";height:0;width:0;position:absolute;pointer-events:none}.beacon-ol-popup[_ngcontent-%COMP%]:after{border-top-color:#fff;border-width:10px;left:48px;margin-left:-10px}.beacon-ol-popup[_ngcontent-%COMP%]:before{border-top-color:#ccc;border-width:11px;left:48px;margin-left:-11px}\"]\n  });\n  return EditablemapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}