{"ast":null,"code":"import { SignalBufferFixed } from './signalbufferFixed';\nimport { timer } from 'rxjs';\nimport { Signal } from '../base/signal';\nexport class SignalBufferCollection {\n  constructor() {\n    this.map = {};\n  }\n  clear() {\n    this.map = {};\n    this.stopClearTimer();\n  }\n  start() {\n    this.startClearTimer();\n  }\n  addValues(valuestring) {\n    if (valuestring) {\n      let data = JSON.parse(valuestring);\n      for (let signal of data) {\n        //console.log('set signal: ' + JSON.stringify(signal));\n        this.addValue(signal[\"ID\"], signal[\"Value\"], signal[\"Name\"], signal[\"Batterie\"]);\n      }\n    }\n  }\n  getNearestBeacon() {\n    //console.log(\"SignalBufferCollection::getNearestBeacon() - \" + JSON.stringify(this.map));\n    let bestValue = -9999;\n    let bestID = undefined;\n    for (let key in this.map) {\n      let value = this.map[key].getValue();\n      if (value) {\n        if (value > bestValue) {\n          bestValue = value;\n          bestID = key;\n        }\n      }\n    }\n    return bestID;\n  }\n  getAllSignals() {\n    let signals = [];\n    for (let key in this.map) {\n      let value = this.map[key].getValue();\n      if (value) {\n        signals.push(new Signal(this.map[key].mac, value, this.map[key].name, this.map[key].battery, this.map[key].lastOrigValue));\n      }\n    }\n    return signals;\n  }\n  getJSONString() {\n    return JSON.stringify(this.map);\n  }\n  getURLString() {\n    let urlString = \"\";\n    let index = 0;\n    for (let key in this.map) {\n      let value = this.map[key].getValue();\n      if (index > 0) {\n        urlString += \"&\";\n      }\n      urlString += 'name[' + key + ']=' + value;\n      index++;\n    }\n    return urlString;\n  }\n  addValue(mac, value, name, battery) {\n    if (!this.map[name]) {\n      this.map[name] = new SignalBufferFixed(name, mac, value, name, battery);\n    } else {\n      this.map[name].setValue(mac, value, name, battery);\n    }\n  }\n  startClearTimer() {\n    //console.log(\"SignalBufferCollection::startClearTimer()\");\n    if (this.clearTimerSubscription != null) {\n      this.stopClearTimer();\n    }\n    let timerO = timer(100);\n    this.clearTimerSubscription = timerO.subscribe(t => {\n      this.clearTimerEvent();\n    });\n  }\n  stopClearTimer() {\n    //console.log(\"SignalBufferCollection::stopClearTimer()\");\n    if (this.clearTimerSubscription != null) {\n      this.clearTimerSubscription.unsubscribe();\n      this.clearTimerSubscription = null;\n    }\n  }\n  clearTimerEvent() {\n    //console.log(\"SignalBufferCollection::clearTimerEvent() - \" + JSON.stringify(this.map));\n    let keysToDelete = [];\n    for (let key in this.map) {\n      if (this.map[key].updateTimer()) {\n        //console.log(\"SignalBufferCollection::clearTimerEvent() - Clear Signal: \" + key);\n        keysToDelete.push(key);\n      }\n    }\n    for (let i = 0; i < keysToDelete.length; i++) {\n      delete this.map[keysToDelete[i]];\n    }\n    this.startClearTimer();\n    //console.log(\"SignalBufferCollection::clearTimerEvent() - END: \" + JSON.stringify(this.map));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}