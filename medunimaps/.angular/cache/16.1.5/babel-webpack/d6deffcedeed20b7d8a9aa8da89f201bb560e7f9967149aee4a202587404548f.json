{"ast":null,"code":"import { OpenlayersHelper } from './openlayershelper';\nimport { MapLayerBase } from './mapLayerBase';\nimport ol_style_Style from 'ol/style/Style';\nimport ol_style_Fill from 'ol/style/Fill';\nimport ol_format_GeoJSON from 'ol/format/GeoJSON';\nexport class MapRoom extends MapLayerBase {\n  constructor(mapService) {\n    super();\n    this.mapService = mapService;\n    this.level = undefined;\n    this.multiLevelMode = false;\n    this.Initialize();\n  }\n  Initialize() {\n    let res = OpenlayersHelper.CreateBasicLayer(new ol_style_Style({\n      /*stroke: new ol.style.Stroke({\r\n        color: 'red',\r\n        width: 0\r\n      }),*/\n      fill: new ol_style_Fill({\n        color: 'rgba(96,96,255,1)'\n      })\n    }));\n    this.layerSource = res.layerSource;\n    this.layer = res.layer;\n  }\n  updateData(floor, multiLayer) {\n    this.level = floor;\n    this.clear();\n    this.multiLevelMode = multiLayer;\n    this.subscribeNewRequest(this.mapService.getRooms(this.level.id).subscribe(rooms => this.showRooms(rooms), error => console.log(\"ERROR deleteNode: \" + error)));\n  }\n  showRooms(features) {\n    //console.log(\"MapRoom::showRooms\");\n    this.clear();\n    let olFeatures = new ol_format_GeoJSON().readFeatures(features);\n    this.layerSource.addFeatures(olFeatures);\n    if (this.multiLevelMode) {\n      this.subscribeNewRequest(this.mapService.getRooms(this.level.floorAbove).subscribe(rooms => this.showRoomsAbove(rooms), error => console.log(\"ERROR deleteNode: \" + error)));\n    }\n  }\n  showRoomsAbove(features) {\n    //console.log(\"MapRoom::showRoomsAbove\");\n    let ol_features = new ol_format_GeoJSON().readFeatures(features);\n    for (let i = 0; i < ol_features.length; i++) {\n      //let coord = ol_features[i].getGeometry().getCoordinates();\n      //ol.coordinate.add(coord, 10, 0);\n      ol_features[i].getGeometry().translate(150, 0);\n    }\n    this.layerSource.addFeatures(ol_features);\n    this.subscribeNewRequest(this.mapService.getRooms(this.level.floorBelow).subscribe(rooms => this.showRoomsBelow(rooms), error => console.log(\"ERROR deleteNode: \" + error)));\n  }\n  showRoomsBelow(features) {\n    let ol_features = new ol_format_GeoJSON().readFeatures(features);\n    for (let i = 0; i < ol_features.length; i++) {\n      //let coord = ol_features[i].getGeometry().getCoordinates();\n      //ol.coordinate.add(coord, 10, 0);\n      ol_features[i].getGeometry().translate(-150, 0);\n    }\n    this.layerSource.addFeatures(ol_features);\n  }\n  getDummyRoom() {\n    return {\n      \"type\": \"FeatureCollection\",\n      \"features\": [{\n        'type': 'Feature',\n        \"id\": 12,\n        'geometry': {\n          \"type\": \"Polygon\",\n          \"coordinates\": [[[1722195.294385298, 5955266.126823761], [1722204.811691066, 5955261.3495094925], [1722202.1244517902, 5955255.975030941], [1722192.6071460224, 5955260.90163628], [1722195.294385298, 5955266.126823761]]]\n        },\n        \"properties\": {}\n      }]\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}