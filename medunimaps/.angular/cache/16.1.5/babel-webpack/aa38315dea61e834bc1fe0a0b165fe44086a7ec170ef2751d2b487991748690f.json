{"ast":null,"code":"import { USEHTTPSERVICE } from '../base/globalconstants';\nimport { MapLayerBase } from './mapLayerBase';\nimport ol_style_Style from 'ol/style/Style';\nimport ol_style_Stroke from 'ol/style/Stroke';\nimport ol_style_Fill from 'ol/style/Fill';\nimport ol_style_Circle from 'ol/style/Circle';\nimport ol_style_Text from 'ol/style/Text';\nimport ol_geom_Point from 'ol/geom/Point';\nimport ol_layer_Vector from 'ol/layer/Vector';\nimport ol_source_Vector from 'ol/source/Vector';\nimport ol_format_GeoJSON from 'ol/format/GeoJSON';\nimport ol_Feature from 'ol/Feature';\nexport class MapPois extends MapLayerBase {\n  constructor(mapService) {\n    super();\n    this.mapService = mapService;\n    this.poitypes = null;\n    this.currentPoiType = null;\n    this.currentFloor = -1;\n    this.iconStyleMap = null;\n    this.iconMarkerMap = null;\n    this.currentSelectedPoi = null;\n    this.currentSelectedPoiMarker = null;\n    this.highlightFeaturePoint = null;\n    this.highlightFeature = null;\n    this.featureAdded = false;\n    this.Initialize();\n  }\n  Initialize() {\n    this.layerSource = new ol_source_Vector({\n      features: []\n    });\n    this.layer = new ol_layer_Vector({\n      source: this.layerSource\n    });\n    this.markerlayerSource = new ol_source_Vector({\n      features: []\n    });\n    this.markerlayer = new ol_layer_Vector({\n      source: this.markerlayerSource\n    });\n  }\n  getMarkerLayer() {\n    return this.markerlayer;\n  }\n  updateData(currentFloor) {\n    if (this.iconStyleMap) {\n      this.clearMarkerLayer();\n      this.clear();\n      this.subscribeNewRequest(this.mapService.getPoiInstances(currentFloor).subscribe(buildings => this.showPois(buildings), error => console.log(\"ERROR deleteNode: \" + error)));\n    }\n  }\n  setPoiTypes(poiTypes) {\n    this.poitypes = poiTypes;\n    this.iconStyleMap = {};\n    this.iconMarkerMap = {};\n    for (let i = 0; i < poiTypes.length; i++) {\n      let iconStyle = new ol_style_Style({\n        text: new ol_style_Text({\n          text: this.poitypes[i].fontKey,\n          font: 'normal 30px medfont',\n          textBaseline: 'bottom',\n          //offsetY: -12,\n          offsetY: -8,\n          fill: new ol_style_Fill({\n            color: 'white'\n          })\n        })\n      });\n      this.iconStyleMap[poiTypes[i].id] = iconStyle;\n      let markerStyle = new ol_style_Style({\n        text: new ol_style_Text({\n          //text: 'l',\n          text: 'm',\n          //font: 'normal 44px medfont',\n          font: 'normal 40px medfont',\n          textBaseline: 'bottom',\n          offsetY: 0,\n          fill: new ol_style_Fill({\n            color: this.poitypes[i].color\n          })\n        })\n      });\n      this.iconMarkerMap[this.poitypes[i].id] = markerStyle;\n    }\n    if (this.currentFloor >= 0) {\n      this.updateData(this.currentFloor);\n    }\n  }\n  setCurrentSelectedPoiType(poiType) {\n    this.currentPoiType = poiType;\n  }\n  setCurrentFloor(layer) {\n    console.log(\"MapPois::setCurrentFloor\");\n    this.currentFloor = layer;\n  }\n  mouseClicked(position, pixelPos, strgPressed, shiftPressed, map) {\n    console.log(\"MapPois::mouseClicked\");\n    if (strgPressed && this.currentPoiType && this.currentFloor >= 0) {\n      this.clearSelection();\n      this.createNewPoi(position);\n    } else if (this.currentFloor >= 0) {\n      if (this.currentSelectedPoi && shiftPressed) {\n        console.log(\"MapPois::mouseClicked Move: \" + this.currentSelectedPoi.getId());\n        this.moveCurrentPoi(position);\n      } else if (this.selectPoi(pixelPos, map)) {\n        if (!this.highlightFeature) {\n          this.initHighlightFeatureOverlay(map);\n        }\n        this.highlightFeaturePoint.setCoordinates(this.currentSelectedPoi.getGeometry().getCoordinates());\n        this.markerlayerSource.addFeature(this.highlightFeature);\n        this.featureAdded = true;\n        console.log(\"MapPois::mouseClicked Select: \" + this.currentSelectedPoi.getId());\n      } else {\n        this.clearSelection();\n      }\n    }\n  }\n  deleteSelectedPoi() {\n    if (!USEHTTPSERVICE) {\n      console.log(\"Offline mode, dont delete edge!\");\n      return;\n    }\n    if (this.currentSelectedPoi) {\n      this.mapService.deletePoi(this.currentSelectedPoi.getId()).subscribe(edge => this.poiDeleted(edge), error => console.log(\"ERROR deletePoi: \" + error));\n    }\n  }\n  poiDeleted(poi) {\n    console.log(\"poiDeleted...\" + JSON.stringify(poi));\n    let feature = this.layerSource.getFeatureById(poi.id);\n    if (feature) {\n      this.layerSource.removeFeature(feature);\n      if (this.currentSelectedPoiMarker) {\n        this.markerlayerSource.removeFeature(this.currentSelectedPoiMarker);\n      }\n      this.clearSelection();\n    }\n  }\n  moveCurrentPoi(position) {\n    console.log(\"MapPois::movePoi... \" + JSON.stringify(position));\n    if (this.currentSelectedPoi) {\n      this.currentSelectedPoi.getGeometry().setCoordinates(position);\n      this.highlightFeature.getGeometry().setCoordinates(position);\n      this.currentSelectedPoiMarker.getGeometry().setCoordinates(position);\n      this.mapService.updatePoi(new ol_format_GeoJSON().writeFeature(this.currentSelectedPoi), this.currentSelectedPoi.getId()).subscribe(poi => this.poiUpdated(poi), error => console.log(\"ERROR: \" + error));\n    }\n  }\n  poiUpdated(poi) {\n    console.log(\"Poi Updated! - \" + JSON.stringify(poi));\n  }\n  selectPoi(pixelPos, map) {\n    this.clearSelection();\n    let options = {\n      layerFilter: layer => this.testLayer(layer)\n    };\n    let feature = null;\n    //console.log(\"mapPois::selectPoi...\");\n    feature = map.forEachFeatureAtPixel(pixelPos, function (feature) {\n      if (feature.get(\"poiId\")) {\n        return feature;\n      }\n    }, options);\n    if (feature) {\n      //console.log(\"mapPois::selectPoi...\");\n      if (feature.get(\"poiId\")) {\n        this.currentSelectedPoiMarker = feature;\n        this.currentSelectedPoi = this.layerSource.getFeatureById(feature.get(\"poiId\"));\n        console.log(\"mapPois::selectPoi: - \" + feature.get(\"poiId\") + \" - \" + this.currentSelectedPoi.getId());\n        return true;\n      }\n    }\n    return false;\n  }\n  testLayer(layer) {\n    return this.markerlayer === layer;\n  }\n  createNewPoi(position) {\n    let center = {\n      \"type\": \"Point\",\n      \"coordinates\": [position[0], position[1]]\n    };\n    this.mapService.addPoiInstance(this.currentFloor, center, this.currentPoiType.id).subscribe(node => this.updateAddPoi(node), error => console.log(\"ERROR: \" + error));\n  }\n  showPois(features) {\n    console.log(\"MapPois::showPois\");\n    this.clearMarkerLayer();\n    this.clear();\n    this.showPoisWithStyles(new ol_format_GeoJSON().readFeatures(features));\n    //this.layerSource.addFeatures((new ol.format.GeoJSON()).readFeatures(features));\n  }\n\n  showPoisWithStyles(olFeatures) {\n    for (let i = 0; i < olFeatures.length; i++) {\n      let id = olFeatures[i].getId();\n      let poiTypeId = olFeatures[i].get(\"name\");\n      console.log(\"MapPois::showPoisWithStyles: \" + id + \"#\" + poiTypeId);\n      let markerfeature = olFeatures[i].clone();\n      markerfeature.setStyle(this.iconMarkerMap[poiTypeId]);\n      markerfeature.set(\"poiId\", id);\n      this.markerlayerSource.addFeature(markerfeature);\n      olFeatures[i].setStyle(this.iconStyleMap[poiTypeId]);\n    }\n    this.layerSource.addFeatures(olFeatures);\n  }\n  updateAddPoi(poi) {\n    console.log(\"MapPois::updateAddNode! - \" + JSON.stringify(poi));\n    this.showPoisWithStyles(new ol_format_GeoJSON().readFeatures(poi));\n    //this.layerSource.addFeatures((new ol.format.GeoJSON()).readFeatures(poi));\n  }\n\n  clearMarkerLayer() {\n    this.markerlayerSource.clear();\n  }\n  clearSelection() {\n    if (this.featureAdded && this.highlightFeature) {\n      this.markerlayerSource.removeFeature(this.highlightFeature);\n      this.featureAdded = false;\n    }\n    this.currentSelectedPoi = null;\n    this.currentSelectedPoiMarker = null;\n  }\n  initHighlightFeatureOverlay(map) {\n    this.highlightFeaturePoint = new ol_geom_Point([0, 0]);\n    this.highlightFeature = new ol_Feature({\n      geometry: this.highlightFeaturePoint,\n      name: 'SelectedPoi'\n    });\n    this.highlightFeature.setStyle(MapPois.higlightStyle);\n  }\n}\nMapPois.higlightObject = new ol_style_Circle({\n  radius: 7,\n  fill: null,\n  stroke: new ol_style_Stroke({\n    color: 'red',\n    width: 6\n  })\n});\nMapPois.higlightStyle = new ol_style_Style({\n  image: MapPois.higlightObject\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}