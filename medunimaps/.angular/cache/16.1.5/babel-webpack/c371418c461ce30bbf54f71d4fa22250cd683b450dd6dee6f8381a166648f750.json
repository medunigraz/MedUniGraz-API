{"ast":null,"code":"import { Point } from '../base/point';\nimport { MapLayerBase } from './mapLayerBase';\nimport { OpenlayersHelper } from './openlayershelper';\nimport ol_style_Style from 'ol/style/Style';\nimport ol_style_Stroke from 'ol/style/Stroke';\nimport ol_Feature from 'ol/Feature';\nimport ol_geom_MultiLineString from 'ol/geom/MultiLineString';\nimport ol_format_GeoJSON from 'ol/format/GeoJSON';\nexport class MapEditEdges extends MapLayerBase {\n  constructor(mapService) {\n    super();\n    this.mapService = mapService;\n    this.startPositions = null;\n    this.Initialize();\n  }\n  Initialize() {\n    let res = OpenlayersHelper.CreateBasicLayer(new ol_style_Style({\n      stroke: new ol_style_Stroke({\n        color: 'gray',\n        width: 3\n      })\n    }));\n    this.layerSource = res.layerSource;\n    this.layer = res.layer;\n    this.lineAr = [];\n    this.multiLineString = new ol_geom_MultiLineString(this.lineAr);\n    this.multiLineFeature = new ol_Feature({\n      geometry: this.multiLineString,\n      name: 'Lines'\n    });\n    this.layerSource.addFeature(this.multiLineFeature);\n    //this.setNewLine([1722194.7183594021, 5955141.12279422], [1722055.5790813519, 5955315.494764996]);\n  }\n\n  setNewStartPos(p) {\n    let point = new Point();\n    point.createFromAr(p);\n    this.startPositions = [point];\n  }\n  setNewStartPositionsForEdgeFeatures(startnodeId, edges) {\n    this.startPositions = [];\n    for (let edge of edges) {\n      let pos = edge.getGeometry().getFirstCoordinate();\n      if (edge.get(\"source\") == startnodeId) {\n        pos = edge.getGeometry().getLastCoordinate();\n      }\n      let p = new Point();\n      p.createFromAr(pos);\n      this.startPositions.push(p);\n    }\n  }\n  setNewEndPos(p) {\n    //console.log(\"MapEditEdges::setNewEndPos - \" + p[0] + \", \" + p[1]);\n    if (this.startPositions != null) {\n      this.lineAr = [];\n      for (let pos of this.startPositions) {\n        this.lineAr.push([pos.getAr(), p]);\n      }\n      this.multiLineString.setCoordinates(this.lineAr);\n    }\n  }\n  clear() {\n    this.startPositions = null;\n    this.lineAr = [];\n    this.multiLineString.setCoordinates(this.lineAr);\n  }\n  setNewLine(p1, p2) {\n    console.log(\"MapEditEdges::setNewLine - \");\n    this.lineAr = [];\n    this.lineAr.push([p1, p2]);\n    this.multiLineString.setCoordinates(this.lineAr);\n  }\n  updateEdges(edges, updatedNode) {\n    let coord = updatedNode.getGeometry().getCoordinates();\n    for (let edge of edges) {\n      //console.log(\"Update Edge: \" + JSON.stringify(new ol.format.GeoJSON().writeFeature(edge)));\n      let geo = edge.getGeometry().getCoordinates();\n      if (edge.get(\"source\") == updatedNode.getId()) {\n        geo[0] = coord;\n      } else {\n        geo[geo.length - 1] = coord;\n      }\n      edge.getGeometry().setCoordinates(geo);\n      this.mapService.updateEdge(new ol_format_GeoJSON().writeFeature(edge), edge.getId()).subscribe(node => this.edgeUpdated(node), error => console.log(\"ERROR: \" + error));\n      //console.log(\"   New Edge: \" + JSON.stringify(new ol.format.GeoJSON().writeFeature(edge)));\n    }\n  }\n\n  edgeUpdated(edge) {\n    //Nothing todo\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}