{"ast":null,"code":"import { BASEMAP } from './mock-basemap02';\nimport { BASEMAP_1 } from './mock-basemap01';\nimport { FLOORS } from './mock-floors';\nimport { ROOMS } from './mock-rooms';\nimport { DEMOROUTE } from './mock-route';\nimport { NAVIGATIONEDGES_DEMO } from './mock-navigationedges';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let MapService = /*#__PURE__*/(() => {\n  class MapService {\n    constructor() {}\n    getBaseMapIntern(layer) {\n      if (layer == 1) {\n        return Promise.resolve(BASEMAP);\n      }\n      return Promise.resolve(BASEMAP_1);\n    }\n    getBaseMap(layer) {\n      return new Promise(resolve => setTimeout(resolve, 200)) // delay 2 seconds\n      .then(() => this.getBaseMapIntern(layer));\n    }\n    getFloorNames() {\n      return of(FLOORS);\n    }\n    getRooms(layer) {\n      return null;\n    }\n    getDoors(layer) {\n      return null;\n    }\n    getFloors(layer) {\n      return null;\n    }\n    getNavigationEdges(layer) {\n      return this.getNavigationEdgesIntern(layer);\n    }\n    getNavigationEdgesIntern(layer) {\n      return of(NAVIGATIONEDGES_DEMO);\n    }\n    getRoute(sourceNodeId, destinationNodeId) {\n      console.log(\"Get Route Local!\");\n      return of(DEMOROUTE);\n    }\n    getPoiTypes() {\n      return null;\n    }\n    getPoiInstances(layer) {\n      return null;\n    }\n    getBeacons(layer) {\n      return null;\n    }\n    getEdgeWeightTypes() {\n      return null;\n    }\n    searchRoom(term) {\n      //https://angular.io/docs/ts/latest/tutorial/toh-pt6.html\n      var rooms = [];\n      //console.log('searchRoom...');\n      if (term.length == 0) {\n        return of(rooms);\n      }\n      for (var i = 0; i < ROOMS.length; i++) {\n        if (ROOMS[i].name.startsWith(term)) {\n          rooms.push(ROOMS[i]);\n        }\n      }\n      return of(rooms);\n    }\n    getNavigationNodes(layer) {\n      return of({\n        'geojson': {\n          'type': 'FeatureCollection',\n          'crs': {\n            'type': 'name',\n            'properties': {\n              'name': 'EPSG:3857'\n            }\n          },\n          'features': [{\n            'type': 'Feature',\n            'geometry': {\n              'type': 'LineString',\n              'coordinates': []\n            }\n          }]\n        }\n      });\n    }\n    addNode(floor, center) {\n      return null;\n    }\n    addEdge(source, destination, length, path) {\n      return null;\n    }\n    addPoiInstance(floor, center, poitypeid) {\n      return null;\n    }\n    addBeacon(floor, center, name) {\n      return null;\n    }\n    deleteNode(id) {\n      return null;\n    }\n    deleteEdge(id) {\n      return null;\n    }\n    deletePoi(id) {\n      return null;\n    }\n    deleteBeacon(id) {\n      return null;\n    }\n    updateNode(node, id) {\n      return null;\n    }\n    updateEdge(edge, id) {\n      return null;\n    }\n    updatePoi(node, id) {\n      return null;\n    }\n    updateBeacon(beacon, id) {\n      return null;\n    }\n  }\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)();\n  };\n  MapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac\n  });\n  return MapService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}